package sec1;
//멀티 쓰레드에서 A쓰레드가 CPU 안에서 동작되다가 B쓰레드가 처리되기 위해 CPU 안으로 로딩되면, 처리되던 A쓰레드는 
//B쓰레드가 있던 캐시 메모리의 자리로 이동된다. => 문맥교환(context switching)
//이러한 일이 자주 일어나게 되면 캐시 메로리에 계속 쓰던 자리만 쓰게 된다.=> 지역성(locality)
//만약, 캐시 메모리가 차게 되면, 그 데이터는 메인 메모리로 이동되고, 메인 메모리마저 꽉 차게 되면, 가상 메모리를 이용하게 된다.
//어떤 메모리에도 CPU가 찾는 데이터가 없을 수도 있는 현상이 발생하게 된다. => 쓰레싱(Thrashing)
//갑자기 예기치 않은 상황이 발생할 경우 CPU는 하던 일을 멈추고 긴급상황을 처리하ㅏ고 난 후 원래로 복귀한다.=> 인터럽트(Interrupt)
//만약, 쓰레드가 종료가 되려면, 정상 종료 또는 인터럽트로 인하여 종료 및 일시중지 될 수 있다.

public class ThreadEx3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
